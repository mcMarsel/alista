Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n/vendor/\n/.ftpquota\n/config\n/HEAD\n/.phpstorm.meta.php\n/_ide_helper.php\n/artisan\n/CONTRIBUTING.md\n/.gitattributes\n/hooks/\n/logs/\n/refs/\n/branches/\n/objects/\n/public/packages/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1498809495000)
+++ .gitignore	(revision )
@@ -14,3 +14,10 @@
 /branches/
 /objects/
 /public/packages/
+.idea/dataSources.local.xml
+.idea/dataSources/f85408bf-640a-4e27-9c08-bf51b6232cc5/_src_/
+.idea/dataSources/f85408bf-640a-4e27-9c08-bf51b6232cc5/_staging_/
+.idea/workspace.xml
+app/storage/sessions/
+"public/images/\320\263\320\276\321\202/"
+"public/images/\343\356\362.zip"
Index: app/controllers/GoodsManagerController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nclass GoodsManagerController extends \\BaseController\n{\n    public function getKurs()\n    {\n        $type = Input::get('type');\n        $currency = \\Currency::where('appointment', '=', $type)\n            ->get()->last();\n        return round($currency['value'], 2);\n    }\n\n    public function managerOrder()\n    {\n        error_reporting(E_ALL | E_STRICT);\n        ini_set('display_errors', 1);\n        set_time_limit(0);\n        //ignore_user_abort(1);\n        $res = Input::get('res');\n        $EmpID = Auth::user()->EmpID;\n        //$newOrd = \\Orders::orderBy('orderID', 'desc')->get()->first()->toArray();\n        $newOrd = DB::select('SELECT * FROM  orders ORDER BY orderID DESC LIMIT 1');\n        $result = json_decode(json_encode($newOrd), true);\n        $newOrder = $result[0]['orderID'] + 1;\n\n        if (empty($res)) {\n            return ['message' => ['error' => 'Нет позиций в счете']];\n        }\n        $pos = 1;\n        $goodsArr = [];\n        $result = [];\n        foreach ($res as $key => $value) {\n            $goods = \\Prods::where('ProdName', '=', $value['name'])->get()->first()->toArray();\n            if (empty($goods)) {\n                return ['message' => ['error' => 'Нет товара']];\n            }\n            $comp = \\Comps::where('CompID', '=', $value['CompID'])->get()->first()->toArray();\n            if (empty($comp)) {\n                return ['message' => ['error' => 'Нет предприятия']];\n            }\n            $rem = \\Rem::where('ProdID', '=', $goods['ProdID'])->get()->first()->toArray();\n            if (empty($rem)) {\n                return ['message' => ['error' => 'Нет остатков']];\n            }\n            $price = \\ProdMP::where('ProdID', '=', $goods['ProdID'])->where('PLID', '=', $value['pl'])->get(['PriceMC'])->first()->toArray();\n            if (empty($price)) {\n                return ['message' => ['error' => 'Нет цены']];\n            }\n            if ($value['CodeID3'] == 1) {\n                $currency = \\Currency::where('appointment', '=', 1)->get(['value'])->first()->value;\n            } else {\n                $currency = \\Currency::where('appointment', '=', 4)->get(['value'])->first()->value;\n            }\n            \\Orders::create([\n                'status' => 0,\n                'orderID' => $newOrder,\n                'SrcPosID' => $pos,\n                'ProdID' => $goods['ProdID'],\n                'ProdName' => $value['name'],\n                'UM' => $value['um'],\n                'CompName' => $comp['CompName'],\n                'CompID' => $value['CompID'],\n                'StockID' => $value['stockID'],\n                'CodeID3' => $value['CodeID3'],\n                'EmpID' => $EmpID,\n                'PLID' => $value['pl'],\n                'PriceMC' => ceil(($value['price'] / 6) * 100) / 100 * 6,\n                'SumPrice' => $value['quantity'] * ceil(($value['price'] / 6) * 100) / 100 * 6,\n                'Qty' => $value['quantity'],\n                'Kurs' => $currency,\n                'created_at' => date(\"Y-m-d\")\n            ]);\n            $pos++;\n            $prod =\n                [\n                    'orderID' => $newOrder,\n                    'SrcPosID' => $pos,\n                    'ProdID' => $goods['ProdID'],\n                    'ProdName' => $value['name'],\n                    'UM' => $value['um'],\n                    'CompName' => $comp['CompName'],\n                    'CompID' => $value['CompID'],\n                    'StockID' => $value['stockID'],\n                    'CodeID3' => $value['CodeID3'],\n                    'EmpID' => $EmpID,\n                    'PLID' => $value['pl'],\n                    'PriceMC' => ceil(($price['PriceMC'] / 6) * 100) / 100 * 6,\n                    'SumPrice' => $value['quantity'] * ceil(($value['price'] / 6) * 100) / 100 * 6,\n                    'Qty' => $value['quantity'],\n                    'Kurs' => $currency\n                ];\n            $result[$key] = ['state' => 'success', 'prod' => $prod];\n        }\n        return $result;\n    }\n\n    public function accr()\n    {\n        set_time_limit(0);\n        ignore_user_abort(1);\n        $bpdf = new BPDF();\n        if (Auth::check()) {\n            if (Auth::getUser()->status == 0) {\n                $EmpID = Auth::getUser()->EmpID;\n                $lastmonth = date('Y-m-d 00:00:00', mktime(0, 0, 0, date('m') - 1, date('d'), date('Y')));\n                $ordersObj = DB::select(\"SELECT o.Qty, o.PriceMC, o.SumPrice, o.orderID, o.DocID, o.StockID, o.CodeID3, \"\n                    . \"o.CompID, o.CompName, o.Kurs, o.created_at, e.EmpID, e.EmpName, i.statusType, i.statusName, \"\n                    . \"SUM(o.SumPrice) as totalPriceCC FROM  orders o\"\n                    . \" JOIN status_inv i ON o.status = i.statusType\"\n                    . \" JOIN Emps e ON e.EmpID = o.EmpID\"\n                    . \" WHERE o.EmpID = \" . $EmpID\n                    . \" AND (o.created_at BETWEEN '\" . $lastmonth . \"' AND '\" . date('Y-m-d 00:00:00') . \"') \"\n                    . \" GROUP BY o.DocID, o.orderID\"\n                    . \" ORDER BY o.orderID DESC\");\n                foreach ($ordersObj as $key => $value) {\n                    if ($value->statusType == 10) {\n                        $ordersObj[$key]->color = '#EE8F48';\n                    } else if ($value->statusType == 5) {\n                        $ordersObj[$key]->color = '#FF4500';\n                    } else {\n                        $ordersObj[$key]->color = '';\n                    }\n                    $totalPrice = '';\n                    if ($value->orderID == NULL) {\n                        $orderID = $value->DocID;\n                        $orderType = 'DocID';\n                    } else {\n                        $orderID = $value->orderID;\n                        $orderType = 'orderID';\n                    }\n                    if ($value->Kurs != 0) {\n                        $ordersObj[$key]->totalPriceMC = $value->totalPriceCC / $value->Kurs;\n                    } else if ($value->totalPriceCC == 0) {\n                        $ordersObj[$key]->totalPriceMC = 'Цена равна НУЛЮ!';\n                    } else {\n                        $ordersObj[$key]->totalPriceMC = 'Курс равен НУЛЮ!';\n                    }\n                }\n            } else {\n                $lastmonth = date('Y-m-d 00:00:00', mktime(0, 0, 0, date('m') - 1, date('d'), date('Y')));\n                $ordersObj = DB::select(\"SELECT o.Qty, o.PriceMC, o.SumPrice, o.orderID, o.DocID, o.StockID, o.CodeID3, o.CompID, \"\n                    . \"o.CompName, o.Kurs, o.created_at, e.EmpID, e.EmpName, i.statusType, i.statusName, \"\n                    . \"SUM(o.SumPrice) as totalPriceCC FROM  orders o\"\n                    . \" JOIN status_inv i ON o.status = i.statusType\"\n                    . \" JOIN Emps e ON e.EmpID = o.EmpID\"\n                    . \" WHERE (o.created_at BETWEEN '\" . $lastmonth . \"' AND '\" . date('Y-m-d 00:00:00') . \"') \"\n                    . \" GROUP BY o.DocID, o.orderID\"\n                    . \" ORDER BY o.orderID DESC\");\n                foreach ($ordersObj as $key => $value) {\n                    if ($value->statusType == 10) {\n                        $ordersObj[$key]->color = '#EE8F48';\n                    } else if ($value->statusType == 5) {\n                        $ordersObj[$key]->color = '#FF4500';\n                    } else {\n                        $ordersObj[$key]->color = '';\n                    }\n                    $totalPrice = '';\n                    if ($value->orderID == NULL) {\n                        $orderID = $value->DocID;\n                        $orderType = 'DocID';\n                    } else {\n                        $orderID = $value->orderID;\n                        $orderType = 'orderID';\n                    }\n                    $ordersObj[$key]->totalPriceMC = $value->totalPriceCC / $value->Kurs;\n                }\n            }\n            $order = [];\n            foreach ($ordersObj as $key => $value) {\n                $order[$key] = (array)$value;\n            }\n            unset($ordersObj);\n            $ordersObj = $order;\n            /*echo \"<pre>\";\n            print_r($ordersObj);\n            echo \"</pre>\";\n            die();*/\n            return View::make('accr', compact('ordersObj'));\n        } else {\n            return Redirect::guest('login');\n        }\n    }\n\n    public function comps()\n    {\n        $empID = Input::get('emp');\n        $comps = \\Comps::orderBy('CompName', 'asc')->get(['CompName', 'CompID'])->toArray();\n        //$comps = \\Comps::where('EmpID', $empID)->orderBy('CompName', 'asc')->get(['CompName', 'CompID'])->toArray();\n        $compsName = [];\n        $compsID = [];\n        foreach ($comps as $key => $value) {\n            array_push($compsName, $value['CompName']);\n            array_push($compsID, $value['CompID']);\n        }\n        unset($comps);\n        $comps = array_combine($compsID, $compsName);\n        asort($comps, SORT_STRING);\n        return $comps;\n    }\n\n    public function categ()\n    {\n        $categ = Input::get('categ');\n        $cat = \\ProdGr2::where('PGrName2', '=', $categ)->get(['PGrID2'])->toArray()[0];\n        $subgr = \\Prods::where('PGrID2', '=', $cat['PGrID2'])->groupBy('PGrID3')->get(['PGrID3'])->toArray();\n        $subgroup = [];\n        $sub = [];\n        foreach ($subgr as $key => $value) {\n            array_push($sub, \\ProdGr3::where('PGrID3', '=', $value['PGrID3'])->get(['PGrName3'])->toArray());\n        }\n        for ($i = 0; $i < count($sub); $i++) {\n            for ($j = 0; $j < count($sub[$i]); $j++) {\n                array_push($subgroup, $sub[$i][$j]['PGrName3']);\n            }\n        }\n        /*foreach($subgr as $key => $value)\n        {\n            if($value['PGrID3'] == 0)\n            {\n            \tcontinue;\n            } else {\n            \tarray_push($subgroup,$value['PGrID3']);\n            }\n        }*/\n        return $subgroup;\n    }\n\n    public function getPL()\n    {\n        $goodid = Input::get('goodid');\n        $PL = \\ProdMP::where('ProdID', '=', $goodid)\n            ->orderBy('PLID', 'asc')->get()->toArray();\n        return $PL;\n    }\n\n    public function cat()\n    {\n        $pgrID3 = Input::get('categ');\n        $stock = Input::get('stockID');\n        $currency = Input::get('kurs');\n        $prods = \\Prods::where('PGrID3', '=', $pgrID3)\n            ->orderBy('ShortProdName', 'asc')\n            ->get(['ProdID', 'ProdName', 'ShortProdName', 'UM'])->toArray();\n        $goods = [];\n        foreach ($prods as $key => $value) {\n            $good = [];\n            $pl = \\ProdMP::where('ProdID', '=', $value['ProdID'])\n                ->where('PLID', '!=', 100)\n                ->orderBy('PLID', 'asc')->get(['PLID', 'PriceMC', 'MinPLID'])->toArray();\n            $rem = \\Rem::where('ProdID', '=', $value['ProdID'])->where('StockID', '=', $stock)->groupBy('ProdID')->get(['RemCash', 'ResCash', 'RemUncash', 'ResUncash'])->toArray();\n            if (!empty($rem) || !empty($pl)) {\n                array_push($good, $value, $pl, $rem);\n                array_push($goods, $good);\n            } else {\n                continue;\n            }\n        }\n        $html = '';\n        /*echo \"<pre>\";\n        print_r($goods);\n        echo \"</pre>\";\n        die();*/\n        foreach ($goods as $key => $value) {\n            if (empty($value[2]) || empty($value[1])) {\n                continue;\n            } else {\n                $html .= '<tr><th><div class=\"shortName\">' . $value[0]['ShortProdName'] . '</div></th>';\n                $html .= '<th><div class=\"name\">' . $value[0]['ProdName'] . '</div></th>';\n                $html .= '<th><input class=\"quantity\" type=\"number\" autocorrect=\"off\" pattern=\"\\d*\" novalidate></th>';\n                $html .= '<th><div class=\"UM\">' . $value[0]['UM'] . '</div></th>';\n                $html .= '<th><span style=\"width: 100%; height: 100%\" goodid=\"' . $value[0]['ProdID'] . '\" class=\"btn price\" name=\"price' . $key . '\" id=\"price' . $key . '\"></span></th>';\n                $html .= '<th><div class=\"remains_cashless\" name=\"residue' . $key . '\" >' . round(($value[2][0]['RemUncash'] - $value[2][0]['ResUncash']), 2) . '</div></th>';\n                $html .= '<th><div class=\"remains_cash\" name=\"residue' . $key . '\" >' . round(($value[2][0]['RemCash'] - $value[2][0]['ResCash']), 2) . '</div></th>';\n                if (count($value[1]) == 10) {\n                    $html .= '<th hidden=\"hidden\" class=\"p0\" plid=\"' . $value[1][0]['PLID'] . '\" minpl=\"' . $value[1][0]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][0]['PriceMC'] * $currency))*/\n                        ceil(($value[1][0]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p1\" plid=\"' . $value[1][1]['PLID'] . '\" minpl=\"' . $value[1][1]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][1]['PriceMC'] * $currency))*/\n                        ceil(($value[1][1]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p2\" plid=\"' . $value[1][2]['PLID'] . '\" minpl=\"' . $value[1][2]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][2]['PriceMC'] * $currency))*/\n                        ceil(($value[1][2]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p3\" plid=\"' . $value[1][3]['PLID'] . '\" minpl=\"' . $value[1][3]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][3]['PriceMC'] * $currency))*/\n                        ceil(($value[1][3]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p4\" plid=\"' . $value[1][4]['PLID'] . '\" minpl=\"' . $value[1][4]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][4]['PriceMC'] * $currency))*/\n                        ceil(($value[1][4]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p5\" plid=\"' . $value[1][5]['PLID'] . '\" minpl=\"' . $value[1][5]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][5]['PriceMC'] * $currency))*/\n                        ceil(($value[1][5]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p6\" plid=\"' . $value[1][6]['PLID'] . '\" minpl=\"' . $value[1][6]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][6]['PriceMC'] * $currency))*/\n                        ceil(($value[1][6]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p7\" plid=\"' . $value[1][7]['PLID'] . '\" minpl=\"' . $value[1][7]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][7]['PriceMC'] * $currency))*/\n                        ceil(($value[1][7]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p8\" plid=\"' . $value[1][8]['PLID'] . '\" minpl=\"' . $value[1][8]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][8]['PriceMC'] * $currency))*/\n                        ceil(($value[1][8]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p9\" plid=\"' . $value[1][9]['PLID'] . '\" minpl=\"' . $value[1][9]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][9]['PriceMC'] * $currency))*/\n                        ceil(($value[1][9]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p10\"> - </th>';\n                } elseif (count($value[1]) == 11) {\n                    $html .= '<th hidden=\"hidden\" class=\"p0\" plid=\"' . $value[1][0]['PLID'] . '\" minpl=\"' . $value[1][0]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][0]['PriceMC'] * $currency))*/\n                        ceil(($value[1][0]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p1\" plid=\"' . $value[1][1]['PLID'] . '\" minpl=\"' . $value[1][1]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][1]['PriceMC'] * $currency))*/\n                        ceil(($value[1][1]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p2\" plid=\"' . $value[1][2]['PLID'] . '\" minpl=\"' . $value[1][2]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][2]['PriceMC'] * $currency))*/\n                        ceil(($value[1][2]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p3\" plid=\"' . $value[1][3]['PLID'] . '\" minpl=\"' . $value[1][3]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][3]['PriceMC'] * $currency))*/\n                        ceil(($value[1][3]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p4\" plid=\"' . $value[1][4]['PLID'] . '\" minpl=\"' . $value[1][4]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][4]['PriceMC'] * $currency))*/\n                        ceil(($value[1][4]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p5\" plid=\"' . $value[1][5]['PLID'] . '\" minpl=\"' . $value[1][5]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][5]['PriceMC'] * $currency))*/\n                        ceil(($value[1][5]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p6\" plid=\"' . $value[1][6]['PLID'] . '\" minpl=\"' . $value[1][6]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][6]['PriceMC'] * $currency))*/\n                        ceil(($value[1][6]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p7\" plid=\"' . $value[1][7]['PLID'] . '\" minpl=\"' . $value[1][7]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][7]['PriceMC'] * $currency))*/\n                        ceil(($value[1][7]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p8\" plid=\"' . $value[1][8]['PLID'] . '\" minpl=\"' . $value[1][8]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][8]['PriceMC'] * $currency))*/\n                        ceil(($value[1][8]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p9\" plid=\"' . $value[1][9]['PLID'] . '\" minpl=\"' . $value[1][9]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][9]['PriceMC'] * $currency))*/\n                        ceil(($value[1][9]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                    $html .= '<th hidden=\"hidden\" class=\"p10\" plid=\"' . $value[1][10]['PLID'] . '\" minpl=\"' . $value[1][10]['MinPLID'] . '\">' . /*sprintf(\"%.2f\", ($value[1][10]['PriceMC'] * $currency))*/\n                        ceil(($value[1][10]['PriceMC'] * $currency / 6) * 100) / 100 * 6 . '</th>';\n                }\n                $html .= '<th><input type=\"button\" id=\"' . $value[0]['ProdID'] . '\" class=\"addGood btn btn-primary\" value=\"Добавить\"></th></tr>';\n            }\n        }\n        return $html;\n    }\n\n    public function export()\n    {\n        ini_set('memory_limit', '-1');\n        $file = Input::file('file');\n        $objPHPExcel = PHPExcel_IOFactory::load($file);\n        $objPHPExcel->setActiveSheetIndex(0);\n        $aSheet = $objPHPExcel->getActiveSheet();\n        $data = array();\n        foreach ($aSheet->getRowIterator() as $row) {\n            $cellIterator = $row->getCellIterator();\n            $item = array();\n            foreach ($cellIterator as $cell) {\n                if (!empty($cell) && ($cell != null) && ($cell != '') && ($cell != '&#9')) {\n                    array_push($item, $cell->getCalculatedValue());\n\n                }\n            }\n            print_r($item);\n            array_push($data, $item);\n        }\n        /*foreach($data as $key => $value)\n        {\n            foreach($value as $k => $v)\n            {\n                if(!empty($value[$k]))\n                {\n                    \\AlistaGoods::insert(['group_id' => $value[0], 'goods' => $value[1], 'title' => $value[2],\n                        'short_name' => $value[3], 'remains_cashless' => $value[4], 'reserve_cashless' => $value[5],\n                        'remains_cash' => $value[6], 'reserve_cash' => $value[7], 'p101' => $value[8],\n                        'p102' => $value[9], 'p103' => $value[10], 'p104' => $value[11], 'p105' => $value[12],\n                        'p106' => $value[13], 'p107' => $value[14], 'p108' => $value[15], 'p109' => $value[16],\n                        'p110' => $value[17]]);\n                } else {\n                    continue;\n                }\n            }\n        }*/\n        /*for($i = 0; $i < count($data[0]); $i++)\n        {\n            for($j = 0; $j < count($data); $j++)\n            {\n                if(!empty($data[$i][$j]))\n                {\n                    \\AlistaGoods::insert(['group_id' => $data[$i][0], 'goods' => $data[$i][1], 'title' => $data[$i][2],\n                        'short_name' => $data[$i][3], 'remains_cashless' => $data[$i][4], 'reserve_cashless' => $data[$i][5],\n                        'remains_cash' => $data[$i][6], 'reserve_cash' => $data[$i][7], 'p101' => $data[$i][8],\n                        'p102' => $data[$i][9], 'p103' => $data[$i][10], 'p104' => $data[$i][11], 'p105' => $data[$i][12],\n                        'p106' => $data[$i][13], 'p107' => $data[$i][14], 'p108' => $data[$i][15], 'p109' => $data[$i][16],\n                        'p110' => $data[$i][17]]);\n                } else {\n                    continue;\n                }\n            }\n        }*/\n        return ['msg' => 'export done'];\n    }\n\n    public function email()\n    {\n        //require_once( '../html2pdf/html2pdf.class.php');\n        //require_once( $_SERVER['DOCUMENT_ROOT'].'/public/packages/PHPMailer-master/PHPMailerAutoload.php');\n\n        $dom = '<table class=\"table table-hover table-bordered table-striped\">\n        <tr>\n            <th rowspan=\"2\"><h3>Рахунок</h3></th>\n            <th>Номер:</th>\n            <th colspan=\"2\">19170</th>\n        </tr>\n        <tr>\n            <th>Дата:</th>\n            <th colspan=\"2\">15.12.2015</th>\n        </tr>\n        <tr>\n            <th>ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ \"ТОРГОВА КОМПАНІЯ \"АЛИСТА\"</th>\n            <th colspan=\"3\">р/с 26002000032507</th>\n        </tr>\n        <tr>\n            <th>49083, м. Дніпропетровськ</th>\n            <th colspan=\"3\">Акціонерний банк \"Південний\" м. Одеса</th>\n        </tr>\n        <tr>\n            <th>вул. Собінова, буд. 1</th>\n            <th colspan=\"3\">МФО 328209</th>\n        </tr>\n        <tr>\n            <th>Податковий код: 372595704614, Свідоцтво: 100324872</th>\n            <th colspan=\"3\">ОКПО 37259577</th>\n        </tr>\n        <tr>\n            <th>Підприємство:</th>\n            <th> ТОВАРИСТВО З ОБМЕЖЕНОЮ ВІДПОВІДАЛЬНІСТЮ \"КАПЕКС\"</th>\n            <th colspan=\"2\"> 16282<br>72<br>1<br>102</th>\n        </tr>\n        <tr>\n            <th>Адреса:</th>\n            <th colspan=\"3\"> вул. Космонавта Комарова, буд. 10</th>\n        </tr>\n        <tr>\n            <th>Місто:</th>\n            <th colspan=\"3\"> м. Одеса  65043</th>\n        </tr>\n    </table>\n    <table class=\"table table-hover table-bordered table-striped\">\n        <tr>\n            <th>Телефон:</th>\n            <th></th>\n            <th>Факс:</th>\n            <th></th>\n        </tr>\n    </table>\n    <br/>\n    <table class=\"table table-hover table-bordered table-striped\">\n        <thead>\n            <tr>\n                <th>Код</th>\n                <th>Назва товарів, (робіт, послуг)</th>\n                <th>Од.Вим.</th>\n                <th>Кількість</th>\n                <th>Ціна без ПДВ</th>\n                <th>Сума без ПДВ</th>\n                <th>Ціна з ПДВ</th>\n                <th>Сума з ПДВ</th>\n            </tr>\n        </thead>\n        <tbody>\n                            <tr>\n                    <th>436-6090-2</th>\n                    <th>Шуруп универсальный, потай, цж, 6*90</th>\n                    <th></th>\n                    <th>120</th>\n                    <th>79.1</th>\n                    <th>9492</th>\n                    <th>88.592</th>\n                    <th>10631.04</th>\n                </tr>\n                    </tbody>\n    </table>\n    <table class=\"table table-hover table-bordered table-striped\">\n        <tr>\n            <th>Кількість: </th>\n            <th>Сума без НДС: </th>\n        </tr>\n        <tr>\n            <th>Загальна вага: </th>\n            <th>Сума НДС: </th>\n        </tr>\n        <tr>\n            <th>Сума з ПДВ:</th>\n            <th>десять тисяч шiстсот тридцять одна гривня 4 коп.</th>\n            <th>10 631,04</th>\n        </tr>\n    </table>';\n\n        /*$html2pdf = new HTML2PDF('L','A4','en');\n        $html2pdf->sethefaultFont('freesans');\n        $html2pdf->WriteHTML($dom);\n        print_r($html2pdf);*/\n        //$Mail = new PHPMailer();\n        /*file_put_contents()\n        $Mail->addAttachment($tempfile, $filename);\n        $Mail->IsMail();\n        $Mail->IsHTML(true);\n        $Mail->CharSet = 'utf-8';\n        $Mail->From = 'metiz.alista.org.ua';\n        $Mail->FromName = ' Отдел метизов';\n        $oMail_user->Subject = 'Видаткова накладна';\n        $oMail_user->Body = $modx->getChunk('email-sales-invoice');\n        $oMail_user->addAddress($tsvshop['EmailForInvoices']);\n\n        if (!$oMail_user->send()) {\n            $out = json_encode(array(\n                'status' => 'error',\n                'message' => 'Во время отправки письма произошла ошибка'\n            ));\n        }*/\n        $status = ['status' => 'done'];\n        return $status;\n        //$tempfile = $_SERVER['DOCUMENT_ROOT'].'/assets/docs/'. session_name() .'-pdf-for-mail-order.pdf';\n        //$html2pdf->Output($tempfile, 'F');\n    }\n\n    public function orders()\n    {\n        $res = Input::get('res');\n\n        $newOrd = DB::select('SELECT * FROM  orders ORDER BY orderID DESC LIMIT 1');\n        $result = json_decode(json_encode($newOrd), true);\n        $newOrder = $result[0]['orderID'] + 1;\n\n        if (empty($res)) {\n            return ['message' => ['error' => 'Нет позиций в счете']];\n        }\n        $pos = 1;\n        $goodsArr = [];\n        $result = [];\n        foreach ($res as $key => $value) {\n            $goods = \\Prods::where('ProdName', '=', $value['name'])->get()->first()->toArray();\n            if (empty($goods)) {\n                return ['message' => ['error' => 'Нет товара']];\n            }\n            $comp = \\Comps::where('CompID', '=', $value['CompID'])->get()->first()->toArray();\n            if (empty($comp)) {\n                return ['message' => ['error' => 'Нет предприятия']];\n            }\n            $rem = \\Rem::where('ProdID', '=', $goods['ProdID'])->get()->first()->toArray();\n            if (empty($rem)) {\n                return ['message' => ['error' => 'Нет остатков']];\n            }\n            $price = \\ProdMP::where('ProdID', '=', $goods['ProdID'])->where('PLID', '=', $value['pl'])->get(['PriceMC'])->first()->toArray();\n            if (empty($price)) {\n                return ['message' => ['error' => 'Нет цены']];\n            }\n            if ($value['CodeID3'] == 1) {\n                $currency = \\Currency::where('appointment', '=', 1)->get(['value'])->first()->value;\n            } else {\n                $currency = \\Currency::where('appointment', '=', 4)->get(['value'])->first()->value;\n            }\n            \\Orders::create([\n                'status' => 0,\n                'orderID' => $newOrder,\n                'SrcPosID' => $pos,\n                'ProdID' => $goods['ProdID'],\n                'ProdName' => $value['name'],\n                'UM' => $value['um'],\n                'CompName' => $comp['CompName'],\n                'CompID' => $value['CompID'],\n                'StockID' => $value['stockID'],\n                'CodeID3' => $value['CodeID3'],\n                'EmpID' => $value['empID'],\n                'PLID' => $value['pl'],\n                'PriceMC' => $value['price'],\n                'SumPrice' => $value['quantity'] * ceil(($value['price'] / 6) * 100) / 100 * 6,\n                'Qty' => $value['quantity'],\n                'Kurs' => $currency,\n                'created_at' => date(\"Y-m-d\")\n            ]);\n            $pos++;\n            $prod =\n                [\n                    'orderID' => $newOrder,\n                    'SrcPosID' => $pos,\n                    'ProdID' => $goods['ProdID'],\n                    'ProdName' => $value['name'],\n                    'UM' => $value['um'],\n                    'CompName' => $comp['CompName'],\n                    'CompID' => $value['CompID'],\n                    'StockID' => $value['stockID'],\n                    'CodeID3' => $value['CodeID3'],\n                    'EmpID' => $value['empID'],\n                    'PLID' => $value['pl'],\n                    'PriceMC' => $value['price'],\n                    'SumPrice' => sprintf(\"%.2f\", $value['quantity'] * $value['price']),\n                    'Qty' => $value['quantity'],\n                    'Kurs' => $currency\n                ];\n            $result[$key] = ['state' => 'success', 'prod' => $prod];\n        }\n        return $result;\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/controllers/GoodsManagerController.php	(date 1498809495000)
+++ app/controllers/GoodsManagerController.php	(revision )
@@ -5,8 +5,7 @@
     public function getKurs()
     {
         $type = Input::get('type');
-        $currency = \Currency::where('appointment', '=', $type)
-            ->get()->last();
+		$currency = \Currency::where('appointment', '=', $type)->get()->last();
         return round($currency['value'], 2);
     }
 
Index: app/config/app.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nreturn array(\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Debug Mode\n    |--------------------------------------------------------------------------\n    |\n    | When your application is in debug mode, detailed error messages with\n    | stack traces will be shown on every error that occurs within your\n    | application. If disabled, a simple generic error page is shown.\n    |\n    */\n\n    'debug' => 1,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application URL\n    |--------------------------------------------------------------------------\n    |\n    | This URL is used by the console to properly generate URLs when using\n    | the Artisan command line tool. You should set this to the root of\n    | your application so that it is used when running Artisan tasks.\n    |\n    */\n\n    'url' => 'http://localhost',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Timezone\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the default timezone for your application, which\n    | will be used by the PHP date and date-time functions. We have gone\n    | ahead and set this to a sensible default for you out of the box.\n    |\n    */\n\n    'timezone' => 'Europe/Kiev',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Locale Configuration\n    |--------------------------------------------------------------------------\n    |\n    | The application locale determines the default locale that will be used\n    | by the translation service provider. You are free to set this value\n    | to any of the locales which will be supported by the application.\n    |\n    */\n\n    'locale' => 'en',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Application Fallback Locale\n    |--------------------------------------------------------------------------\n    |\n    | The fallback locale determines the locale to use when the current one\n    | is not available. You may change the value to correspond to any of\n    | the language folders that are provided through your application.\n    |\n    */\n\n    'fallback_locale' => 'en',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Encryption Key\n    |--------------------------------------------------------------------------\n    |\n    | This key is used by the Illuminate encrypter service and should be set\n    | to a random, 32 character string, otherwise these encrypted strings\n    | will not be safe. Please do this before deploying an application!\n    |\n    */\n\n    'key' => 'eFdxuSzvBNni00DjfSmgcfO6HoLpOiYS',\n\n    'cipher' => MCRYPT_RIJNDAEL_128,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Autoloaded Service Providers\n    |--------------------------------------------------------------------------\n    |\n    | The service providers listed here will be automatically loaded on the\n    | request to your application. Feel free to add your own services to\n    | this array to grant expanded functionality to your applications.\n    |\n    */\n\n    'providers' => array(\n\n        'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\n        'Illuminate\\Auth\\AuthServiceProvider',\n        'Illuminate\\Cache\\CacheServiceProvider',\n        'Illuminate\\Session\\CommandsServiceProvider',\n        'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',\n        'Illuminate\\Routing\\ControllerServiceProvider',\n        'Illuminate\\Cookie\\CookieServiceProvider',\n        'Illuminate\\Database\\DatabaseServiceProvider',\n        'Illuminate\\Encryption\\EncryptionServiceProvider',\n        'Illuminate\\Filesystem\\FilesystemServiceProvider',\n        'Illuminate\\Hashing\\HashServiceProvider',\n        'Illuminate\\Html\\HtmlServiceProvider',\n        'Illuminate\\Log\\LogServiceProvider',\n        'Illuminate\\Mail\\MailServiceProvider',\n        'Illuminate\\Database\\MigrationServiceProvider',\n        'Illuminate\\Pagination\\PaginationServiceProvider',\n        'Illuminate\\Queue\\QueueServiceProvider',\n        'Illuminate\\Redis\\RedisServiceProvider',\n        'Illuminate\\Remote\\RemoteServiceProvider',\n        'Illuminate\\Auth\\Reminders\\ReminderServiceProvider',\n        'Illuminate\\Database\\SeedServiceProvider',\n        'Illuminate\\Session\\SessionServiceProvider',\n        'Illuminate\\Translation\\TranslationServiceProvider',\n        'Illuminate\\Validation\\ValidationServiceProvider',\n        'Illuminate\\View\\ViewServiceProvider',\n        'Illuminate\\Workbench\\WorkbenchServiceProvider',\n        'Laracasts\\Flash\\FlashServiceProvider',\n        'Way\\Generators\\GeneratorsServiceProvider',\n        'Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider',\n        'Barryvdh\\DomPDF\\ServiceProvider',\n\n    ),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Service Provider Manifest\n    |--------------------------------------------------------------------------\n    |\n    | The service provider manifest is used by Laravel to lazy load service\n    | providers which are not needed for each request, as well to keep a\n    | list of all of the services. Here, you may set its storage spot.\n    |\n    */\n\n    'manifest' => storage_path() . '/meta',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Class Aliases\n    |--------------------------------------------------------------------------\n    |\n    | This array of class aliases will be registered when this application\n    | is started. However, feel free to register as many as you wish as\n    | the aliases are \"lazy\" loaded so they don't hinder performance.\n    |\n    */\n\n    'aliases' => array(\n\n        'App' => 'Illuminate\\Support\\Facades\\App',\n        'Artisan' => 'Illuminate\\Support\\Facades\\Artisan',\n        'Auth' => 'Illuminate\\Support\\Facades\\Auth',\n        'Blade' => 'Illuminate\\Support\\Facades\\Blade',\n        'Cache' => 'Illuminate\\Support\\Facades\\Cache',\n        'ClassLoader' => 'Illuminate\\Support\\ClassLoader',\n        'Config' => 'Illuminate\\Support\\Facades\\Config',\n        'Controller' => 'Illuminate\\Routing\\Controller',\n        'Cookie' => 'Illuminate\\Support\\Facades\\Cookie',\n        'Crypt' => 'Illuminate\\Support\\Facades\\Crypt',\n        'DB' => 'Illuminate\\Support\\Facades\\DB',\n        'Eloquent' => 'Illuminate\\Database\\Eloquent\\Model',\n        'Event' => 'Illuminate\\Support\\Facades\\Event',\n        'File' => 'Illuminate\\Support\\Facades\\File',\n        'Form' => 'Illuminate\\Support\\Facades\\Form',\n        'Hash' => 'Illuminate\\Support\\Facades\\Hash',\n        'HTML' => 'Illuminate\\Support\\Facades\\HTML',\n        'Input' => 'Illuminate\\Support\\Facades\\Input',\n        'Lang' => 'Illuminate\\Support\\Facades\\Lang',\n        'Log' => 'Illuminate\\Support\\Facades\\Log',\n        'Mail' => 'Illuminate\\Support\\Facades\\Mail',\n        'Paginator' => 'Illuminate\\Support\\Facades\\Paginator',\n        'Password' => 'Illuminate\\Support\\Facades\\Password',\n        'Queue' => 'Illuminate\\Support\\Facades\\Queue',\n        'Redirect' => 'Illuminate\\Support\\Facades\\Redirect',\n        'Redis' => 'Illuminate\\Support\\Facades\\Redis',\n        'Request' => 'Illuminate\\Support\\Facades\\Request',\n        'Response' => 'Illuminate\\Support\\Facades\\Response',\n        'Route' => 'Illuminate\\Support\\Facades\\Route',\n        'Schema' => 'Illuminate\\Support\\Facades\\Schema',\n        'Seeder' => 'Illuminate\\Database\\Seeder',\n        'Session' => 'Illuminate\\Support\\Facades\\Session',\n        'SoftDeletingTrait' => 'Illuminate\\Database\\Eloquent\\SoftDeletingTrait',\n        'SSH' => 'Illuminate\\Support\\Facades\\SSH',\n        'Str' => 'Illuminate\\Support\\Str',\n        'URL' => 'Illuminate\\Support\\Facades\\URL',\n        'Validator' => 'Illuminate\\Support\\Facades\\Validator',\n        'View' => 'Illuminate\\Support\\Facades\\View',\n        'Flash' => 'Laracasts\\Flash\\Flash',\n        'BPDF' => 'Barryvdh\\DomPDF\\Facade',\n\n    ),\n\n);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/config/app.php	(date 1498809495000)
+++ app/config/app.php	(revision )
@@ -26,7 +26,7 @@
     |
     */
 
-    'url' => 'http://localhost',
+	'url' => 'http://metiz.alista.com.ua',
 
     /*
     |--------------------------------------------------------------------------
Index: app/config/session.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nreturn array(\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Session Driver\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default session \"driver\" that will be used on\n    | requests. By default, we will use the lightweight native driver but\n    | you may specify any of the other wonderful drivers provided here.\n    |\n    | Supported: \"file\", \"cookie\", \"database\", \"apc\",\n    |            \"memcached\", \"redis\", \"array\"\n    |\n    */\n\n    'driver' => 'cookie',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Lifetime\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify the number of minutes that you wish the session\n    | to be allowed to remain idle before it expires. If you want them\n    | to immediately expire on the browser closing, set that option.\n    |\n    */\n\n    'lifetime' => 120,\n\n    'expire_on_close' => false,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session File Location\n    |--------------------------------------------------------------------------\n    |\n    | When using the native session driver, we need a location where session\n    | files may be stored. A default has been set for you but a different\n    | location may be specified. This is only needed for file sessions.\n    |\n    */\n\n    'files' => storage_path() . '/sessions',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Database Connection\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"database\" or \"redis\" session drivers, you may specify a\n    | connection that should be used to manage these sessions. This should\n    | correspond to a connection in your database configuration options.\n    |\n    */\n\n    'connection' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Database Table\n    |--------------------------------------------------------------------------\n    |\n    | When using the \"database\" session driver, you may specify the table we\n    | should use to manage the sessions. Of course, a sensible default is\n    | provided for you; however, you are free to change this as needed.\n    |\n    */\n\n    'table' => 'sessions',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Sweeping Lottery\n    |--------------------------------------------------------------------------\n    |\n    | Some session drivers must manually sweep their storage location to get\n    | rid of old sessions from storage. Here are the chances that it will\n    | happen on a given request. By default, the odds are 2 out of 100.\n    |\n    */\n\n    'lottery' => array(2, 100),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Name\n    |--------------------------------------------------------------------------\n    |\n    | Here you may change the name of the cookie used to identify a session\n    | instance by ID. The name specified here will get used every time a\n    | new session cookie is created by the framework for every driver.\n    |\n    */\n\n    'cookie' => 'laravel_session',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Path\n    |--------------------------------------------------------------------------\n    |\n    | The session cookie path determines the path for which the cookie will\n    | be regarded as available. Typically, this will be the root path of\n    | your application but you are free to change this when necessary.\n    |\n    */\n\n    'path' => '/',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Session Cookie Domain\n    |--------------------------------------------------------------------------\n    |\n    | Here you may change the domain of the cookie used to identify a session\n    | in your application. This will determine which domains the cookie is\n    | available to in your application. A sensible default has been set.\n    |\n    */\n\n    'domain' => null,\n\n    /*\n    |--------------------------------------------------------------------------\n    | HTTPS Only Cookies\n    |--------------------------------------------------------------------------\n    |\n    | By setting this option to true, session cookies will only be sent back\n    | to the server if the browser has a HTTPS connection. This will keep\n    | the cookie from being sent to you if it can not be done securely.\n    |\n    */\n\n    'secure' => false,\n\n);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/config/session.php	(date 1498809495000)
+++ app/config/session.php	(revision )
@@ -122,7 +122,7 @@
     |
     */
 
-    'domain' => null,
+	'domain' => 'metiz.alista.com.ua',
 
     /*
     |--------------------------------------------------------------------------
